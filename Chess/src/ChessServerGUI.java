import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.awt.event.*;
import java.util.*;

public class ChessServerGUI {
    private JPanel panel;
    private JButton submitButton;
    private JTextField commandField;
    private JTextArea textArea;
    private Deque<String> commandQueue;

    public ChessServerGUI() {

        // redirect stdout to a new output stream directed at the text area
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                textArea.append(String.valueOf((char) b));
                textArea.setCaretPosition(textArea.getDocument().getLength());
            }
        };
        System.setOut(new PrintStream(out));
        System.setErr(new PrintStream(out));

        // create an action listener for the input field submit button
        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                submit();
            }
        });

        commandField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    submit();
                }
            }
        });
    }

    private void submit() {

        // get text from input field then clear it
        String command = commandField.getText();
        commandField.setText("");
        System.out.println(command);
    }

    public static void main(String[] args) {

        // Attempt to get native "look and feel"
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        // initialize the frame
        JFrame frame = new JFrame("Chess Server");
        frame.setContentPane(new ChessServerGUI().panel);
        frame.setSize(1280, 720);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new BorderLayout(0, 0));
        final JSplitPane splitPane1 = new JSplitPane();
        panel.add(splitPane1, BorderLayout.SOUTH);
        submitButton = new JButton();
        submitButton.setText("Submit");
        splitPane1.setLeftComponent(submitButton);
        commandField = new JTextField();
        splitPane1.setRightComponent(commandField);
        textArea = new JTextArea();
        textArea.setEditable(false);
        Font textAreaFont = this.$$$getFont$$$("Courier New", -1, 18, textArea.getFont());
        if (textAreaFont != null) textArea.setFont(textAreaFont);
        textArea.setLineWrap(true);
        panel.add(textArea, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
